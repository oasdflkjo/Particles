#version 310 es

layout(local_size_x = 256) in;

struct Particle {
    vec2 position;
    vec2 velocity;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

uniform vec2 gravityPoint;
uniform float deltaTime;

// Precomputed constants
const float ATTRACTION_STRENGTH = 20.0;
const float TERMINAL_VELOCITY = 200.0;
const float TERMINAL_VELOCITY_SQ = TERMINAL_VELOCITY * TERMINAL_VELOCITY;
const float INV_TERMINAL_VEL = 1.0 / TERMINAL_VELOCITY;
const float DAMPING = 0.9992;

void main() {
    uint index = gl_GlobalInvocationID.x;
    uint numParticles = uint(particles.length());
    
    if (index >= numParticles) return;
    
    vec2 pos = particles[index].position;
    vec2 vel = particles[index].velocity;
    
    // Calculate direction to gravity point using inversesqrt
    vec2 toGravity = gravityPoint - pos;
    float distSq = dot(toGravity, toGravity);
    float invLen = inversesqrt(distSq);
    vec2 dir = toGravity * invLen;
    
    // Apply force with deltaTime
    vel += dir * (ATTRACTION_STRENGTH * deltaTime);
    
    // Optimized terminal velocity check and clamping
    float speedSq = dot(vel, vel);
    if (speedSq > TERMINAL_VELOCITY_SQ) {
        float scale = TERMINAL_VELOCITY * inversesqrt(speedSq);
        vel *= scale;
    }
    
    // Apply damping
    vel *= DAMPING;
    
    // Update position
    pos += vel * deltaTime;
    
    // Store back
    particles[index].position = pos;
    particles[index].velocity = vel;
} 