#version 310 es

layout(local_size_x = 256) in;

struct Particle {
    vec2 position;
    vec2 velocity;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

uniform vec2 gravityPoint;
uniform float deltaTime;

void main() {
    uint index = gl_GlobalInvocationID.x;
    uint numParticles = uint(particles.length());
    
    if (index >= numParticles) return;
    
    vec2 pos = particles[index].position;
    vec2 vel = particles[index].velocity;
    
    // Physics parameters
    float attractionStrength = 20.0;  // Constant force strength
    float terminalVelocity = 200.0;    // High max velocity
    float damping = 0.998;            // Very little damping
    
    // Calculate direction to gravity point
    vec2 toGravity = gravityPoint - pos;
    vec2 dir = normalize(toGravity);
    
    // Apply constant force in direction of gravity point
    vec2 force = dir * attractionStrength;
    
    // Apply forces
    vel += force * deltaTime;
    
    // Apply terminal velocity
    float speedSq = dot(vel, vel);
    if (speedSq > terminalVelocity * terminalVelocity) {
        vel = normalize(vel) * terminalVelocity;
    }
    
    // Apply damping
    vel *= damping;
    
    // Update position
    pos += vel * deltaTime;
    
    // Store back
    particles[index].position = pos;
    particles[index].velocity = vel;
} 